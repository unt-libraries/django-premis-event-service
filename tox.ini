[pytest]
addopts = --reuse-db -x
DJANGO_SETTINGS_MODULE = tests.settings

[flake8]
max-line-length = 99
exclude = *migrations/*

[tox]
envlist=
    py27-django{19,110,master}
    flake8

[testenv]
passenv =
    # Tests will run against the same db (mysql or sqlite) that you're using
    # in your development environment.
    # In docker, tests run under mysql, because that PES_BACKEND is explicitly
    # set in docker-compose.
    PES_BACKEND
basepython = python2.7
whitelist_externals =
    python
    pip
deps =
    pipenv
commands =
    pipenv install --dev --ignore-pipfile

    # Override pipenv version of Django as needed by test envs. Use pip so that
    # Pipfile.lock doesn't end up changed by this process.
    django19: pip install Django~=1.9.0
    django110: pip install Django~=1.10.0
    djangomaster: pip uninstall Django
    djangomaster: pip install https://github.com/django/django/archive/master.tar.gz

    # The assert=plain flag here is critical. Otherwise tests fail in the Docker
    # environment in the process of rewriting .pyc files to allow assertion
    # introspection - possibly mismatches in bytecode between compiled Python
    # in the Docker vs localhost environments due to architecture differences.
    pipenv run py.test --assert=plain

    # Reset to original dependencies.
    pipenv install --dev --ignore-pipfile

[testenv:flake8]
basepython = python2.7
deps =
    pipenv
    flake8
commands =
    pipenv install --dev --ignore-pipfile
    pipenv run flake8 setup.py premis_event_service tests

[testenv:py27-djangomaster]
ignore_outcome = True
ignore_errors = True
commands =
    # This will scan the dependency graph for insecure versions.
    # We put it in the djangomaster env so that it won't cause build failures,
    # but we will be notified.
    pipenv check
